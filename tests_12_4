import unittest
from tests_12_1 import RunnerTest, TournamentTest

def skip_if_frozen(cls):
    def decorator(func):
        def wrapper(*args, **kwargs):
            if cls.is_frozen:
                print(f"Тесты в этом кейсе заморожены: {func.__name__}")
                raise unittest.SkipTest("Тесты в этом кейсе заморожены")
            else:
                return func(*args, **kwargs)
        return wrapper
    return decorator

class RunnerTest(RunnerTest):
    is_frozen = False

    @skip_if_frozen(RunnerTest)
    def test_walk(self):
        super().test_walk()

    @skip_if_frozen(RunnerTest)
    def test_run(self):
        super().test_run()

    @skip_if_frozen(RunnerTest)
    def test_challenge(self):
        super().test_challenge()

class TournamentTest(TournamentTest):
    is_frozen = True

    @skip_if_frozen(TournamentTest)
    def test_race_usain_and_nick(self):
        super().test_race_usain_and_nick()

    @skip_if_frozen(TournamentTest)
    def test_race_andrey_and_nick(self):
        super().test_race_andrey_and_nick()

    @skip_if_frozen(TournamentTest)
    def test_race_usain_andrey_and_nick(self):
        super().test_race_usain_andrey_and_nick()

def suite():
    test_suite = unittest.TestSuite()
    test_suite.addTest(unittest.makeSuite(RunnerTest))
    test_suite.addTest(unittest.makeSuite(TournamentTest))
    return test_suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite())


#
import unittest
import logging

# Настройка логирования
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s: %(message)s',
    handlers=[
        logging.FileHandler("runner_tests.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class Runner:
    def __init__(self, name, speed):
        if not isinstance(name, str):
            raise TypeError("Name must be a string")
        if speed < 0:
            raise ValueError("Speed must be non-negative")
        self.name = name
        self.speed = speed
        self.distance = 0

    def walk(self):
        self.distance += 5 * self.speed

    def run(self):
        self.distance += 10 * self.speed

    def __eq__(self, other):
        return self.name == other.name

class RunnerTest(unittest.TestCase):
    all_results = {}
    is_frozen = False

    @classmethod
    def setUpClass(cls):
        cls.all_results = {}

    def setUp(self):
        self.usain = Runner("Усэйн", 10)
        self.andrey = Runner("Андрей", 9)
        self.nick = Runner("Ник", 3)

    @classmethod
    def tearDownClass(cls):
        for key, value in cls.all_results.items():
            print(value)

    def test_walk(self):
        try:
            runner = Runner("TestRunner", -5)  # Передаем отрицательное значение в speed
            for _ in range(10):
                runner.walk()
            logging.info('"test_walk" выполнен успешно')
        except ValueError as e:
            logging.warning("Неверная скорость для Runner")

    def test_run(self):
        try:
            runner = Runner(123, 10)  # Передаем что-то кроме строки в name
            for _ in range(10):
                runner.run()
            logging.info('"test_run" выполнен успешно')
        except TypeError as e:
            logging.warning("Неверный тип данных для объекта Runner")

    def test_challenge(self):
        runner1 = Runner("TestRunner1", 10)
        runner2 = Runner("TestRunner2", 3)
        for _ in range(10):
            runner1.run()
            runner2.walk()
        self.assertNotEqual(runner1.distance, runner2.distance)
        self.__class__.all_results[3] = (runner1.distance, runner2.distance)

if __name__ == '__main__':
    unittest.main()
