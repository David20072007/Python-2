import unittest

class Runner:
    def __init__(self, name, speed):
        self.name = name
        self.speed = speed
        self.distance = 0

    def walk(self):
        self.distance += 5 * self.speed

    def run(self):
        self.distance += 10 * self.speed

    def __eq__(self, other):
        return self.name == other.name

class Tournament:
    def __init__(self, distance, runners):
        self.distance = distance
        self.runners = runners

    def start(self):
        results = {}
        for runner in self.runners:
            while runner.distance < self.distance:
                runner.run()
            results[len(results) + 1] = runner.name
        return results

class RunnerTest(unittest.TestCase):
    all_results = {}
    is_frozen = False

    @classmethod
    def setUpClass(cls):
        cls.all_results = {}

    def setUp(self):
        self.usain = Runner("Усэйн", 10)
        self.andrey = Runner("Андрей", 9)
        self.nick = Runner("Ник", 3)

    @classmethod
    def tearDownClass(cls):
        for key, value in cls.all_results.items():
            print(value)

    def test_walk(self):
        runner = Runner("TestRunner", 10)
        for _ in range(10):
            runner.walk()
        self.assertEqual(runner.distance, 500)
        self.__class__.all_results[1] = runner.distance

    def test_run(self):
        runner = Runner("TestRunner", 10)
        for _ in range(10):
            runner.run()
        self.assertEqual(runner.distance, 1000)
        self.__class__.all_results[2] = runner.distance

    def test_challenge(self):
        runner1 = Runner("TestRunner1", 10)
        runner2 = Runner("TestRunner2", 3)
        for _ in range(10):
            runner1.run()
            runner2.walk()
        self.assertNotEqual(runner1.distance, runner2.distance)
        self.__class__.all_results[3] = (runner1.distance, runner2.distance)

class TournamentTest(unittest.TestCase):
    all_results = {}
    is_frozen = True

    @classmethod
    def setUpClass(cls):
        cls.all_results = {}

    def setUp(self):
        self.usain = Runner("Усэйн", 10)
        self.andrey = Runner("Андрей", 9)
        self.nick = Runner("Ник", 3)

    @classmethod
    def tearDownClass(cls):
        for key, value in cls.all_results.items():
            print(value)

    def test_race_usain_and_nick(self):
        tournament = Tournament(90, [self.usain, self.nick])
        results = tournament.start()
        self.assertTrue(results[len(results)] == "Ник")
        self.__class__.all_results[1] = results

    def test_race_andrey_and_nick(self):
        tournament = Tournament(90, [self.andrey, self.nick])
        results = tournament.start()
        self.assertTrue(results[len(results)] == "Ник")
        self.__class__.all_results[2] = results

    def test_race_usain_andrey_and_nick(self):
        tournament = Tournament(90, [self.usain, self.andrey, self.nick])
        results = tournament.start()
        self.assertTrue(results[len(results)] == "Ник")
        self.__class__.all_results[3] = results

if __name__ == '__main__':
    unittest.main()
