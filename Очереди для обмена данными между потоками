import threading
import time
class Table:
    def __init__(self, number):
        self.number = number
        self.is_busy = False
class Customer(threading.Thread):
    def __init__(self, number, table, cafe):
        super().__init__()
        self.number = number
        self.table = table
        self.cafe = cafe
    def run(self):
        print(f"Посетитель номер {self.number} сел за стол {self.table.number}.")
        time.sleep(5)  # Время обслуживания 5 секунд
        self.table.is_busy = False
        print(f"Посетитель номер {self.number} покушал и ушёл.")
        self.cafe.serve_next_customer()
class Cafe:
    def __init__(self, tables):
        self.queue = []
        self.tables = tables
        self.customer_count = 0
    def customer_arrival(self):
        self.customer_count += 1
        print(f"Посетитель номер {self.customer_count} прибыл.")
        self.serve_customer(self.customer_count)
    def serve_customer(self, customer_number):
        for table in self.tables:
            if not table.is_busy:
                table.is_busy = True
                customer = Customer(customer_number, table, self)
                customer.start()
                return
        print(f"Посетитель номер {customer_number} ожидает свободный стол.")
        self.queue.append(customer_number)
    def serve_next_customer(self):
        if self.queue:
            next_customer = self.queue.pop(0)
            self.serve_customer(next_customer)
tables = [Table(i) for i in range(1, 4)]  # 3 стола
cafe = Cafe(tables)
for _ in range(10):
    cafe.customer_arrival()
    time.sleep(1)
